buildscript {
    ext {
        junitVersion = '5.9.3'
    }
    repositories {
        mavenLocal()
        mavenCentral()
    }
}

plugins {
    id 'java'
    id 'org.javamodularity.moduleplugin' version "1.8.12"
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.13'
    id 'org.beryx.jlink' version '2.26.0'
}

apply plugin: 'java'

jar {
    version = '0.0.1-beta'
}

repositories {
    mavenLocal()
    mavenCentral()
}

compileJava {
    targetCompatibility = "17"
    sourceCompatibility = "17"
}

project.description = "Zenmart ERP - Fintech Software."
project.ext.buildDate = new Date()
project.version = "1.0.0"

test {
    useJUnitPlatform()
}

javafx {
    version = "20"
    modules = ['javafx.controls', 'javafx.fxml', 'javafx.web', 'javafx.media', 'javafx.graphics']
}

application {
    mainModule = 'org.infinite.spoty'
    mainClass = 'org.infinite.spoty.Main'
}

jlink {
    imageZip = project.file("${buildDir}/distributions/app-${javafx.platform.classifier}.zip")
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        name = 'Zenmart ERP'
        jvmArgs = ['-Djdk.gtk.version=3']
    }

//    forceMerge 'istack', 'stax'

    mergedModule {
//        additive = true
        requires 'javafx.controls'
        requires 'javafx.fxml'
        requires 'javafx.graphics'
        requires 'javafx.media'
        requires 'java.logging'
        requires 'java.sql'
//        requires 'jdk.jdi'
//        requires 'java.rmi'
        requires 'java.xml'
//        requires 'java.desktop'
//        requires 'java.management'
        requires 'java.naming'
//        requires 'jdk.attach'
//        requires 'java.scripting'
//        requires 'java.datatransfer'
//        requires 'java.compiler'
//        requires 'java.transaction.xa'
//        requires 'java.instrument'
        requires 'net.bytebuddy'
        requires 'org.hibernate.commons.annotations'
        requires 'jakarta.persistence'
        requires 'org.jboss.logging'
        requires 'com.fasterxml.classmate'

        uses 'org.hibernate.integrator.spi.Integrator'
        uses 'org.hibernate.boot.registry.selector.spi.DialectSelector'
        uses 'org.hibernate.boot.registry.selector.StrategyRegistrationProvider'
        uses 'org.hibernate.service.spi.ServiceContributor'
        uses 'org.hibernate.id.factory.spi.GenerationTypeStrategyRegistration'
        uses 'org.hibernate.boot.spi.MetadataSourcesContributor'
        uses 'org.hibernate.boot.spi.MetadataBuilderInitializer'
        uses 'org.hibernate.boot.spi.MetadataBuilderFactory'
        uses 'org.hibernate.engine.jdbc.dialect.spi.DialectResolver'
        uses 'org.hibernate.boot.model.TypeContributor'
        uses 'org.hibernate.boot.spi.MetadataContributor'
        uses 'org.hibernate.boot.spi.AdditionalMappingContributor'
        uses 'org.hibernate.boot.spi.AdditionalJaxbMappingProducer'
        uses 'org.hibernate.boot.spi.SessionFactoryBuilderFactory'
        uses 'org.hibernate.service.spi.SessionFactoryServiceContributor'
        uses 'org.hibernate.event.spi.EventEngineContributor'
        uses 'org.hibernate.boot.model.FunctionContributor'
        uses 'org.hibernate.query.criteria.spi.CriteriaBuilderExtension'
        provides 'jakarta.persistence.spi.PersistenceProvider' with 'org.hibernate.jpa.HibernatePersistenceProvider'
    }

    jpackage {
        // Could be taken from command line, here it is defined statically
        // project.findProperty('installerOs')
        //    (example: -PinstallerOs=mac)
        targetPlatformName = 'linux-x64'
        // Resource directory for native package overrides,
        // you can do lots of magic here too...
        // resourceDir = file('package/')

        if (targetPlatformName == 'mac') { // we are on mac
            targetPlatform("mac") {
                // Use downloaded Eclipse Temurin JDK
                jdkHome = '/Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home'
                // Use another local JDK
                //jdkHome = '/Library/Java/JavaVirtualMachines/jdk-17.0.2.jdk/Contents/Home'
            }
            installerType = 'pkg' // we want to have macOS PKG
        }
        if (targetPlatformName == 'win') { // we are on Windows
            targetPlatform("win") {
                jdkHome = 'C:/Applications/JDKs/Adoptium/temurin-17.jdk'
            }
            installerType = 'exe'
        }
        if (targetPlatformName == 'linux-x64') { // we are on linux
            targetPlatform("linux-x64") {
                addExtraModulePath("/home/infinite/Java_FX/javafx-jmods-20/linux_x64")
            }
            installerType = 'deb'
        }

        // Add jpackage-specific options
        installerOptions = [
                '--name', 'Zenmart-ERP', // installer name
                // '--app-version', version.replace('-', '.'),
                '--description', project.description,
                '--copyright', 'Copyrigth 2023 infinite Studios',
                '--vendor', 'infinite Studios'
        ]

        // We also could take the installer type from comand line
        // installerType = project.findProperty('installerType')
        // We would pass this from the command line
        //    (example: -PinstallerType=msi)

        // Add platform-specific options for the target image and for jpackage
        if (installerType == 'pkg') {
            imageOptions += ['--icon', 'src/main/resources/icon.icns']
            installerOptions += [
                    '--license-file', 'package/LICENSE-OS-Installer.txt'
            ]
        }
        if (installerType == 'exe') {
            imageOptions += ['--icon', 'src/main/resources/icon.ico']
            installerOptions += [
                    // '--win-per-user-install', // Install only for current user
                    // '--win-console', // Shows what Java outputs to the console
                    '--win-dir-chooser',
                    '--win-menu', '--win-shortcut'
            ]
        }
        if (installerType in ['deb', 'rpm']) {
            imageOptions += ['--icon', 'src/main/resources/logo.png']
            installerOptions += [
                    '--linux-menu-group', 'Work',
                    '--linux-shortcut'
            ]
        }
        if (installerType == 'deb') {
            installerOptions += [
                    '--linux-deb-maintainer', 'info@codecellar.com'
            ]
        }
        if (installerType == 'rpm') {
            installerOptions += [
                    '--linux-rpm-license-type', 'GPLv3'
            ]
        }
    }
    addExtraDependencies('javafx')
}

tasks.register('doPackageAll') {
    doLast {
        if (Os.isFamily(Os.FAMILY_UNIX)) {
            exec {
                mkdir("$buildDir/distributions")
                executable "$projectDir/scripts/JLinkPackage.sh"
                args = ["$buildDir"]
            }
        }
    }
}

jlinkZip.doLast {
    doPackageAll
}

dependencies {
    implementation 'org.jetbrains:annotations:24.0.1'
    implementation 'com.clickhouse:org.apache.commons.compress:1.9.1'
    implementation 'io.github.palexdev:materialfx:11.16.0'
    implementation('org.kordamp.ikonli:ikonli-javafx:12.3.1')
    implementation "org.kordamp.ikonli:ikonli-core:12.3.1"
    implementation "org.kordamp.ikonli:ikonli-fontawesome5-pack:12.3.1"
    implementation 'com.oracle.database.jdbc:ojdbc11-production:23.2.0.0'
    implementation 'org.hibernate:hibernate-core:6.2.5.Final'
    implementation 'org.hibernate.common:hibernate-commons-annotations:6.0.6.Final'
    implementation 'org.apache.derby:derby:10.16.1.1'
    implementation 'org.apache.derby:derbytools:10.16.1.1'
    implementation 'org.hibernate:hibernate-community-dialects:6.2.5.Final'
    implementation 'net.bytebuddy:byte-buddy:1.14.5'
    implementation 'jakarta.persistence:jakarta.persistence-api:3.1.0'
    implementation 'jakarta.enterprise:jakarta.enterprise.cdi-api:4.0.1'
    implementation 'com.fasterxml:classmate:1.5.1'
    implementation 'javax.xml.bind:jaxb-api:2.4.0-b180830.0359'
    implementation 'org.glassfish.jaxb:jaxb-runtime:4.0.3'
    implementation "fr.brouillard.oss:cssfx:11.5.1"
    implementation "io.github.palexdev:scenicview:17.0.2"
    implementation "io.github.palexdev:virtualizedfx:11.9.0"
    implementation "io.github.palexdev:mfxcomponents:11.16.2"
    implementation "org.slf4j:slf4j-simple:2.0.7"
    implementation 'org.jboss.logging:jboss-logging:3.5.1.Final'
    implementation group: 'com.sun.activation', name: 'javax.activation', version: '1.2.0'
    implementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    implementation "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
}