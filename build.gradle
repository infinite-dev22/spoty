buildscript {
    ext {
        junitVersion = '5.9.3'
    }
    repositories {
        mavenLocal()
        mavenCentral()
    }
}

plugins {
    id 'java'
    id 'org.javamodularity.moduleplugin' version "1.8.12"
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.13'
    id 'org.beryx.jlink' version '2.25.0'
}

apply plugin: 'java'

jar {
    version = '0.0.1-beta'
}

repositories {
    mavenLocal()
    mavenCentral()
}

targetCompatibility = "17"
sourceCompatibility = "17"

project.description = "Zenmart ERP - Fintech Software."
project.ext.buildDate = new Date()
project.version = "1.0.0"
group = "org.infinite.spoty"

test {
    useJUnitPlatform()
}

javafx {
    version = "20.0.1"
    modules = ['javafx.controls', 'javafx.fxml', 'javafx.web', 'javafx.media', 'javafx.graphics']
}

application {
    mainModule = 'org.infinite.spoty'
    mainClass = 'org.infinite.spoty.App'
}

run {
    jvmArgs = ['-Djdk.gtk.version=3']
}

jlink {
    imageZip = project.file("${buildDir}/distributions/app-${javafx.platform.classifier}.zip")
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        name = 'Zenmart ERP'
        jvmArgs = ['-Djdk.gtk.version=3']
    }
    // forceMerge('log4j-api')

    mergedModule {
        requires 'javafx.graphics'
        requires 'java.logging'
        requires 'java.sql'
        requires 'jdk.jdi'
        requires 'java.rmi'
        requires 'java.xml'
        requires 'com.sun.xml.txw2'
        requires 'java.desktop'
        requires 'java.management'
        requires 'java.naming'
        requires 'jdk.attach'
        requires 'java.scripting'
        requires 'java.datatransfer'
        requires 'java.compiler'
        requires 'java.transaction.xa'
        requires 'com.sun.xml.fastinfoset'
        requires 'java.instrument'
        requires 'net.bytebuddy'
        requires 'com.fasterxml.classmate'

        uses 'org.jboss.logging.LoggerProvider'
        uses 'javax.persistence.spi.PersistenceProvider'
//        uses 'org.hibernate.integrator.spi.Integrator'
//        uses 'org.hibernate.boot.registry.selector.StrategyRegistrationProvider'
//        uses 'org.hibernate.service.spi.ServiceContributor'
//        uses 'org.hibernate.boot.spi.MetadataSourcesContributor'
//        uses 'org.hibernate.boot.spi.MetadataBuilderInitializer'
//        uses 'org.hibernate.boot.spi.MetadataBuilderFactory'
//        uses 'org.hibernate.boot.model.TypeContributor'
        provides 'javax.persistence.spi.PersistenceProvider' with 'org.hibernate.jpa.HibernatePersistenceProvider'
    }

    jpackage {
        // Could be taken from command line, here it is defined statically
        // project.findProperty('installerOs')
        //    (example: -PinstallerOs=mac)
        targetPlatformName = 'linux-x64'
        // Resource directory for native package overrides,
        // you can do lots of magic here too...
        // resourceDir = file('package/')

        if (targetPlatformName == 'mac') { // we are on mac
            targetPlatform("mac") {
                // Use downloaded Eclipse Temurin JDK
                jdkHome = '/Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home'
                // Use another local JDK
                //jdkHome = '/Library/Java/JavaVirtualMachines/jdk-17.0.2.jdk/Contents/Home'
            }
            installerType = 'pkg' // we want to have macOS PKG
        }
        if (targetPlatformName == 'win') { // we are on Windows
            targetPlatform("win") {
                jdkHome = 'C:/Applications/JDKs/Adoptium/temurin-17.jdk'
            }
            installerType = 'exe'
        }
        if (targetPlatformName == 'linux-x64') { // we are on linux
            targetPlatform("linux-x64") {
                addExtraModulePath("/home/infinite/Java_FX/javafx-jmods-20/linux_x64")
            }
            installerType = 'deb'
        }

        // Add jpackage-specific options
        installerOptions = [
                '--name', 'Zenmart-ERP', // installer name
                // '--app-version', version.replace('-', '.'),
                '--description', project.description,
                '--copyright', 'Copyrigth 2023 infinite Studios',
                '--vendor', 'infinite Studios'
        ]

        // We also could take the installer type from comand line
        // installerType = project.findProperty('installerType')
        // We would pass this from the command line
        //    (example: -PinstallerType=msi)

        // Add platform-specific options for the target image and for jpackage
        if (installerType == 'pkg') {
            imageOptions += ['--icon', 'src/main/resources/icon.icns']
            installerOptions += [
                    '--license-file', 'package/LICENSE-OS-Installer.txt'
            ]
        }
        if (installerType == 'exe') {
            imageOptions += ['--icon', 'src/main/resources/icon.ico']
            installerOptions += [
                    // '--win-per-user-install', // Install only for current user
                    // '--win-console', // Shows what Java outputs to the console
                    '--win-dir-chooser',
                    '--win-menu', '--win-shortcut'
            ]
        }
        if (installerType in ['deb', 'rpm']) {
            imageOptions += ['--icon', 'src/main/resources/logo.png']
            installerOptions += [
                    '--linux-menu-group', 'Work',
                    '--linux-shortcut'
            ]
        }
        if (installerType == 'deb') {
            installerOptions += [
                    '--linux-deb-maintainer', 'info@codecellar.com'
            ]
        }
        if (installerType == 'rpm') {
            installerOptions += [
                    '--linux-rpm-license-type', 'GPLv3'
            ]
        }
    }
    addExtraDependencies('javafx')
}

tasks.register('doPackageAll') {
    doLast {
        if (Os.isFamily(Os.FAMILY_UNIX)) {
            exec {
                mkdir("$buildDir/distributions")
                executable "$projectDir/scripts/JLinkPackage.sh"
                args = ["$buildDir"]
            }
        }
    }
}

jlinkZip.doLast {
    doPackageAll
}

dependencies {
    // Material FX.
    implementation 'io.github.palexdev:materialfx:11.16.0'
    // Icons.
    implementation('org.kordamp.ikonli:ikonli-javafx:12.3.1')
    implementation "org.kordamp.ikonli:ikonli-core:12.3.1"
    implementation "org.kordamp.ikonli:ikonli-fontawesome5-pack:12.3.1"
    // JDBC database drivers.
    implementation 'com.oracle.database.jdbc:ojdbc11-production:23.2.0.0'
    // DATABASE.
    // Hibernate.
    implementation 'org.hibernate:hibernate-core:6.2.4.Final'
    implementation 'org.hibernate.common:hibernate-commons-annotations:6.0.6.Final'
    // Connector/Driver
//    implementation 'org.xerial:sqlite-jdbc:3.42.0.0'
    // Derby DB.
    implementation 'org.apache.derby:derby:10.16.1.1'
    implementation 'org.apache.derby:derbytools:10.16.1.1'
    // Hibernate Dialects
//    implementation("com.github.gwenn:sqlite-dialect:0.1.4")
    implementation 'org.hibernate:hibernate-community-dialects:6.2.4.Final'
    // ByteBuddy
    implementation 'net.bytebuddy:byte-buddy:1.14.5'
    // Persistance API
    // implementation 'javax.persistence:javax.persistence-api:2.2'
    implementation 'jakarta.persistence:jakarta.persistence-api:3.1.0'
    // Jakarta CDI.
    implementation 'jakarta.enterprise:jakarta.enterprise.cdi-api:4.0.1'
    // FasterXML
    implementation 'com.fasterxml:classmate:1.5.1'
    // JAXB XML Binding API
    implementation 'javax.xml.bind:jaxb-api:2.4.0-b180830.0359'
    // JAXB XML Binding Runtime
    implementation 'org.glassfish.jaxb:jaxb-runtime:4.0.3'
    // CSSFX.
    implementation "fr.brouillard.oss:cssfx:11.5.1"
    // Libraries for Material FX.
    implementation "io.github.palexdev:scenicview:17.0.2"
    implementation "io.github.palexdev:virtualizedfx:11.9.0"
    implementation "io.github.palexdev:mfxcomponents:11.16.2"
    // SLF4J Logger.
    implementation "org.slf4j:slf4j-simple:2.0.7"
    // JBOSS Logger.
    implementation 'org.jboss.logging:jboss-logging:3.5.1.Final'
    // FXML Compiler
    // implementation "io.github.paullo612.mlfx.api:micronaut:0.6.1"
    // java.activation
    implementation group: 'com.sun.activation', name: 'javax.activation', version: '1.2.0'
    // JUnit test framework.
    implementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    implementation "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
    // Log4J
//    implementation 'org.apache.logging.log4j:log4j-api:2.17.1'
//    implementation 'org.apache.logging.log4j:log4j-core:2.17.1'
//    implementation 'org.apache.logging.log4j:log4j-slf4j-impl:2.17.1'
//    implementation 'org.apache.commons:commons-lang3:3.12.0'
}