buildscript {
    ext {
        junitVersion = '5.10.0'
    }
    repositories {
        mavenLocal()
        mavenCentral()
    }
}

plugins {
    id 'java'
    id 'org.javamodularity.moduleplugin' version "1.8.12"
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.13'
    id 'org.beryx.jlink' version '2.26.0'
//    id 'org.graalvm.buildtools.native' version '0.9.23'
}

apply plugin: 'java'

jar {
    version = '0.0.1-beta'
}

repositories {
    mavenLocal()
    mavenCentral()
    gradlePluginPortal()
}

compileJava {
    targetCompatibility = "17"
    sourceCompatibility = "17"
}

//graalvmNative {
//    toolchainDetection = true
//    binaries {
//        main {
//            javaLauncher = javaToolchains.launcherFor {
//                languageVersion = JavaLanguageVersion.of(17)
//                vendor = JvmVendorSpec.matching("Oracle Corporation")
//            }
//        }
//    }
//}

project.description = "Zenmart ERP - Fintech Software."
project.ext.buildDate = new Date()
project.version = "1.0.0"

test {
    useJUnitPlatform()
}

javafx {
    version = "20.0.1"
    modules = ['javafx.controls', 'javafx.fxml', 'javafx.web', 'javafx.media', 'javafx.graphics']
}

application {
    mainModule = 'org.infinite.spoty'
    mainClass = 'org.infinite.spoty.Main'
}

run {
    jvmArgs = [
            '-Djdk.gtk.version=3',
            '-XX:NewRatio=1',
            '-Xms256m',
            '-Xmx2G',
            '-XX:ReservedCodeCacheSize=512m',
            '-XX:+UseG1GC',
            '-XX:SoftRefLRUPolicyMSPerMB=50',
            '-XX:CICompilerCount=2',
            '-XX:+HeapDumpOnOutOfMemoryError',
            '-XX:-OmitStackTraceInFastThrow',
            '-XX:+IgnoreUnrecognizedVMOptions',
            '-Dsun.io.useCanonCaches=false',
            '-Dsun.java2d.metal=true',
            '-Djbr.catch.SIGABRT=true',
            '-Djdk.http.auth.tunneling.disabledSchemes=""',
            '-Djdk.attach.allowAttachSelf=true',
            '-Djdk.module.illegalAccess.silent=true'
    ]
}

jar {
    manifest {
        attributes(
                'Main-Class': 'org.infinite.spoty.Main'
        )
    }
}

jlink {
    imageZip = project.file("${buildDir}/distributions/app-${javafx.platform.classifier}.zip")
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        name = 'Zenmart ERP'
        jvmArgs = [
                '-Djdk.gtk.version=3'
        ]
    }

    jpackage {
        // Could be taken from command line, here it is defined statically
        // project.findProperty('installerOs')
        //    (example: -PinstallerOs=mac)
        targetPlatformName = 'linux-x64'
        // Resource directory for native package overrides,
        // you can do lots of magic here too...
        // resourceDir = file('package/')

        if (targetPlatformName == 'mac') { // we are on mac
            targetPlatform("mac") {
                // Use downloaded Eclipse Temurin JDK
                jdkHome = '/Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home'
                // Use another local JDK
                //jdkHome = '/Library/Java/JavaVirtualMachines/jdk-17.0.2.jdk/Contents/Home'
            }
            installerType = 'pkg' // we want to have macOS PKG
        }
        if (targetPlatformName == 'win') { // we are on Windows
            targetPlatform("win") {
                jdkHome = 'C:/Applications/JDKs/Adoptium/temurin-17.jdk'
            }
            installerType = 'exe'
        }
        if (targetPlatformName == 'linux-x64') { // we are on linux
            targetPlatform("linux-x64") {
                addExtraModulePath("/home/infinite/Java_FX/javafx-jmods-20/linux_x64")
            }
            installerType = 'deb'
        }

        // Add jpackage-specific options
        installerOptions = [
                '--name', 'Zenmart-ERP', // installer name
                // '--app-version', version.replace('-', '.'),
                '--description', project.description,
                '--copyright', 'Copyrigth 2023 infinite Studios',
                '--vendor', 'infinite Studios'
        ]

        // We also could take the installer type from comand line
        // installerType = project.findProperty('installerType')
        // We would pass this from the command line
        //    (example: -PinstallerType=msi)

        // Add platform-specific options for the target image and for jpackage
        if (installerType == 'pkg') {
            imageOptions += ['--icon', 'src/main/resources/icon.icns']
            installerOptions += [
                    '--license-file', 'package/LICENSE-OS-Installer.txt'
            ]
        }
        if (installerType == 'exe') {
            imageOptions += ['--icon', 'src/main/resources/icon.ico']
            installerOptions += [
                    // '--win-per-user-install', // Install only for current user
                    // '--win-console', // Shows what Java outputs to the console
                    '--win-dir-chooser',
                    '--win-menu', '--win-shortcut'
            ]
        }
        if (installerType in ['deb', 'rpm']) {
            imageOptions += ['--icon', 'src/main/resources/logo.png']
            installerOptions += [
                    '--linux-menu-group', 'Work',
                    '--linux-shortcut'
            ]
        }
        if (installerType == 'deb') {
            installerOptions += [
                    '--linux-deb-maintainer', 'info@codecellar.com'
            ]
        }
        if (installerType == 'rpm') {
            installerOptions += [
                    '--linux-rpm-license-type', 'GPLv3'
            ]
        }
    }
    addExtraDependencies('javafx')
}

tasks.register('doPackageAll') {
    doLast {
        if (Os.isFamily(Os.FAMILY_UNIX)) {
            exec {
                mkdir("$buildDir/distributions")
                executable "$projectDir/scripts/JLinkPackage.sh"
                args = ["$buildDir"]
            }
        }
    }
}

jlinkZip.doLast {
    doPackageAll
}

dependencies {
    implementation 'org.mybatis:mybatis:3.5.13'
    implementation 'org.xerial:sqlite-jdbc:3.43.0.0'
    implementation 'com.j256.ormlite:ormlite-jdbc:6.1'
    implementation 'org.jetbrains:annotations:24.0.1'
    implementation 'io.github.palexdev:materialfx:11.16.1'
    implementation('org.kordamp.ikonli:ikonli-javafx:12.3.1')
    implementation "org.kordamp.ikonli:ikonli-core:12.3.1"
    implementation "org.kordamp.ikonli:ikonli-fontawesome5-pack:12.3.1"
    implementation 'jakarta.persistence:jakarta.persistence-api:3.1.0'
    implementation 'jakarta.enterprise:jakarta.enterprise.cdi-api:4.0.1'
    implementation "fr.brouillard.oss:cssfx:11.5.1"
    implementation "io.github.palexdev:scenicview:17.0.2"
    implementation "io.github.palexdev:virtualizedfx:11.9.6"
    implementation "io.github.palexdev:mfxcomponents:11.22.0"
    implementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    implementation "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
}