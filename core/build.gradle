plugins {
    id "java"
    id "org.javamodularity.moduleplugin" version "$modulePlugin"
    id "application"
    id "org.openjfx.javafxplugin" version "$jfxPlugin"
    id "org.beryx.jlink" version "$jlink"
    id "org.graalvm.buildtools.native" version "$nativeBuildTool"
    id "io.freefair.lombok" version "$lombokPlugin"
    id "com.github.mrcjkb.module-finder" version "0.0.7"
}

apply plugin: "java"

project.description = "OpenSale ERP - Fintech Software."
project.ext.buildDate = LocalDate.now()
project.version = "$spoty"

repositories {
    mavenLocal()
    mavenCentral()
    gradlePluginPortal()
    maven { url "https://jitpack.io" }
    maven {
        url "https://sandec.jfrog.io/artifactory/repo"
    }
}

//graalvmNative {
//    toolchainDetection = true
//
//    agent {
//        defaultMode = "standard" // Default agent mode if one isn't specified using `-Pagent=mode_name`
//        enabled = true // Enables the agent
//
//        modes {
//            // The standard agent mode generates metadata without conditions.
//            standard {
//            }
//            // The conditional agent mode generates metadata with conditions.
//            conditional {
//                userCodeFilterPath = "path-to-filter.json"
//                // Path to a filter file that determines classes which will be used in the metadata conditions.
//                extraFilterPath = "path-to-another-filter.json"
//                // Optional, extra filter used to further filter the collected metadata.
//            }
//            // The direct agent mode allows users to directly pass options to the agent.
//            direct {
//                // {output_dir} is a special string expanded by the plugin to where the agent files would usually be output.
//                options.add("config-output-dir={output_dir}")
//                options.add("experimental-configuration-with-origins")
//            }
//        }
//
//        callerFilterFiles.from("filter.json")
//        accessFilterFiles.from("filter.json")
//        builtinCallerFilter = true
//        builtinHeuristicFilter = true
//        enableExperimentalPredefinedClasses = false
//        enableExperimentalUnsafeAllocationTracing = false
//        trackReflectionMetadata = true
//
//        // Copies metadata collected from tasks into the specified directories.
//        metadataCopy {
//            inputTaskNames.add("test") // Tasks previously executed with the agent attached.
//            outputDirectories.add("src/main/resources/META-INF/native-image/<groupId>/<artifactId>/")
//            // Replace <groupId> and <artifactId> with GAV coordinates of your project
//            mergeWithExisting = true // Instead of copying, merge with existing metadata in the output directories.
//        }
//
//        /*
//        By default, if `-Pagent` is specified, all tasks that extend JavaForkOptions are instrumented.
//        This can be limited to only specific tasks that match this predicate.
//         */
//        // tasksToInstrumentPredicate = t -> true
//    }
//
//    binaries {
//        main {
//            // Main options
//            imageName = 'OpenSale-ERP' // The name of the native image, defaults to the project name
//            mainClass = 'inc.nomard.spoty.core.Main' // The main class to use, defaults to the application.mainClass
//            debug = true
//            // Determines if debug info should be generated, defaults to false (alternatively add --debug-native to the CLI)
//            verbose = true // Add verbose output, defaults to false
//            fallback = false // Sets the fallback mode of native-image, defaults to false
//            sharedLibrary = false
//            // Determines if image is a shared library, defaults to false if `java-library` plugin isn't included
//            quickBuild = false
//            // Determines if image is being built in quick build mode (alternatively use GRAALVM_QUICK_BUILD environment variable, or add --native-quick-build to the CLI)
//            richOutput = false // Determines if native-image building should be done with rich output
//            // requiredVersion = '22.3' // The minimal GraalVM version, can be `MAJOR`, `MAJOR.MINOR` or `MAJOR.MINOR.PATCH`
//
//            // systemProperties = [name1: 'value1', name2: 'value2'] // Sets the system properties to use for the native image builder
//            // configurationFileDirectories.from(file('src/my-config')) // Adds a native image configuration file directory, containing files like reflection configuration
//            // excludeConfig.put("org.example.test:artifact:version", ["^/META-INF/native-image/.*", "^/config/.*"]) // Excludes configuration that matches one of given regexes from JAR of dependency with said coordinates.
//            // excludeConfig.put(file("path/to/artifact.jar"), listOf("^/META-INF/native-image/.*", "^/config/.*"))
//
//            // Advanced options
//            buildArgs.add('--link-at-build-time')
//            // Passes '--link-at-build-time' to the native image builder options. This can be used to pass parameters which are not directly supported by this extension
//            buildArgs.add("-O4")
//            // jvmArgs.add('flag') // Passes 'flag' directly to the JVM running the native image builder
//
//            // Runtime options
//            runtimeArgs.add('--help') // Passes '--help' to built image, during "nativeRun" task
//
//            // useFatJar = true // Instead of passing each jar individually, builds a fat jar
//        }
//    }
//
//    binaries.configureEach {
//        buildArgs.add('--verbose')
//        resources.autodetect()
//    }
//}

tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"
}

application {
    mainModule = "spoty.core"
    mainClass = "inc.nomard.spoty.core.Main"
}

test {
    useJUnitPlatform()
}

run {
    jvmArgs = [
            "-XX:NewRatio=1",
            "-Xms256m",
            "-Xmx1G",
            "-XX:ReservedCodeCacheSize=512m",
            "-XX:+UseG1GC",
            "-XX:SoftRefLRUPolicyMSPerMB=50",
            "-XX:CICompilerCount=2",
            "-XX:+HeapDumpOnOutOfMemoryError",
            "-Dsun.io.useCanonCaches=false",
            "-Djbr.catch.SIGABRT=true",
            "-Djdk.attach.allowAttachSelf=true",
            "--add-exports=javafx.graphics/com.sun.glass.ui=ALL-UNNAMED",
    ]
}

jar {
    manifest {
        attributes(
                "Main-Class": "inc.nomard.spoty.Main"
        )
    }
}

jlink {
    addExtraDependencies(
            "javafx",
            "jakarta.inject",
            "org.jetbrains.annotations",
            "com.dlsc.gemsfx:gemsfx",
            "eu.hansolo.fx:charts",
            "com.calendarfx:view",
            ":utils"
    )
    options = ["--strip-debug", "--no-header-files", "--no-man-pages"]
    launcher {
        name = "OpenSale ERP"
        jvmArgs = [
                "-XX:NewRatio=1",
                "-Xms256m",
                "-Xmx1G",
                "-XX:ReservedCodeCacheSize=512m",
                "-XX:+UseG1GC",
                "-XX:SoftRefLRUPolicyMSPerMB=50",
                "-XX:CICompilerCount=2",
                "-XX:+HeapDumpOnOutOfMemoryError",
                "-Dsun.io.useCanonCaches=false",
                "-Djbr.catch.SIGABRT=true",
                "-Djdk.attach.allowAttachSelf=true",
                "-XX:ErrorFile=/home/infinite-dev/IdeaProjects/spoty/error%p.log",
                "--add-exports=javafx.graphics/com.sun.glass.ui=ALL-UNNAMED",
        ]
    }

    jpackage {
        installerOptions = [
                "--name", "OpenSale-ERP",
                "--description", project.description,
                "--app-version", project.version,
                "--copyright", "Copyright " + LocalDate.now().getYear() + " nomard inc.",
                "--vendor", "nomard inc.",
//                "--icon", "src/main/resources/icon.ico",
//                "--type", "msi",
//                 Windows Only
//                "--win-dir-chooser",
//                "--win-menu", "--win-shortcut",
//                "--win-dir-chooser", "--win-menu",
//                "--win-per-user-install", "--win-shortcut-prompt",
                /*"--win-console",*/ /*"--verbose"*/
        ]
    }
}

dependencies {
    implementation project(":network_bridge")
    implementation project(":utils")
    implementation 'jakarta.inject:jakarta.inject-api:2.0.1'
    implementation "javax.measure:unit-api:$measure_unit_api"
    implementation "com.dlsc.gemsfx:gemsfx:$gemsfx"
//    implementation "com.github.iAmGio:froxty:1.4.0"
    implementation "com.calendarfx:view:11.12.7"
    implementation "eu.hansolo.fx:charts:$fx_charts"
//    implementation "io.soabase.record-builder:record-builder-core:39"
    implementation "io.github.mkpaz:atlantafx-parent:2.0.1"
    implementation "io.github.mkpaz:atlantafx-styles:2.0.1"
    implementation "io.github.mkpaz:atlantafx-base:2.0.1"
    implementation "com.google.code.gson:gson:2.10.1"
    compileOnly "org.projectlombok:lombok"
    annotationProcessor "org.projectlombok:lombok"
    implementation "org.projectlombok:lombok:$lombok"
    implementation "io.github.palexdev:materialfx:$materialfx"
    implementation "org.kordamp.ikonli:ikonli-javafx:$ikonLi"
    implementation "org.kordamp.ikonli:ikonli-core:$ikonLi"
    implementation "org.kordamp.ikonli:ikonli-fontawesome5-pack:$ikonLi"
    implementation "fr.brouillard.oss:cssfx:$cssfx"
    implementation "io.github.palexdev:virtualizedfx:$virtualizedFX" // update to version -> 21.1.0 breaks the system.
    implementation "io.github.palexdev:mfxcomponents:$mfxComponents"
    implementation "org.junit.jupiter:junit-jupiter-api:$junit"
    implementation "org.junit.jupiter:junit-jupiter-engine:$junit"
}
