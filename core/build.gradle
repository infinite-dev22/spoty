plugins {
    id "java"
    id "org.javamodularity.moduleplugin" version "$module_plugin"
    id "application"
    id "org.openjfx.javafxplugin" version "$jfx_plugin"
    id "org.beryx.jlink" version "$jlink_plugin"
    id "org.graalvm.buildtools.native" version "$native_build_tool_plugin"
    id "io.freefair.lombok" version "$lombok_plugin"
    id "com.github.mrcjkb.module-finder" version "$module_finder_plugin"
}

apply plugin: "java"

project.description = "OpenSale ERP - Fintech Software."
project.ext.buildDate = LocalDate.now()
project.version = "$spoty"
def app_copyright = "Copyright " + LocalDate.now().getYear() + " nomard inc."

repositories {
    mavenLocal()
    mavenCentral()
    gradlePluginPortal()
    maven {
        url "https://sandec.jfrog.io/artifactory/repo"
    }
    maven { url 'https://jitpack.io' }
}

//graalvmNative {
//    binaries.all {
//        resources.autodetect()
//        buildArgs.add("-O4")
//        buildArgs.add("--initialize-at-build-time=org.apache.logging.log4j.*")
//        buildArgs.add("--initialize-at-build-time=org.apache.logging.log4j,org.apache.logging.log4j.core")
//    }
//    toolchainDetection = true
//    agent {
//        defaultMode = "standard"
//        enabled = true
//        modes {
//            standard {
//            }
//        }
//        builtinCallerFilter = true
//        builtinHeuristicFilter = true
//        enableExperimentalPredefinedClasses = false
//        enableExperimentalUnsafeAllocationTracing = false
//        trackReflectionMetadata = true
//        metadataCopy {
//            inputTaskNames.add("test")
//            outputDirectories.add("src/main/resources/META-INF/native-image/<groupId>/<artifactId>/")
//            mergeWithExisting = true
//        }
//    }
//    binaries {
//        main {
//            imageName = "OpenSale-ERP"
//            mainClass = "inc.nomard.spoty.core.Main"
//            debug = true
//            verbose = true
//            fallback = false
//            sharedLibrary = false
//            quickBuild = false
//            richOutput = false
//        }
//    }
//    binaries.configureEach {
//        buildArgs.add("--verbose")
//        resources.autodetect()
//    }
//}

tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"
}

application {
    mainModule = "spoty.core"
    mainClass = "inc.nomard.spoty.core.Main"
}

test {
    useJUnitPlatform()
}

run {
    jvmArgs = [
            "-XX:NewRatio=1",
            "-Xms256m",
            "-Xmx1G",
            "-XX:ReservedCodeCacheSize=128m",
            "-XX:MaxGCPauseMillis=200",
            "-XX:SoftRefLRUPolicyMSPerMB=50",
            "-XX:+HeapDumpOnOutOfMemoryError",
            "-Djbr.catch.SIGABRT=true",
            "-Djdk.attach.allowAttachSelf=true",
            "-XX:ErrorFile=/home/infinite-dev/IdeaProjects/spoty/error%p.log",
            "--add-exports=javafx.graphics/com.sun.glass.ui=ALL-UNNAMED",
            "-XX:+TieredCompilation",
            "-XX:+UseStringDeduplication",
            "-Xlog:gc*,gc+cpu,gc+heap=debug:file=/tmp/gc.log:time,uptime,level,tags",
            "-Djava.security.egd=file:/dev/urandom",
            "-XX:+AlwaysPreTouch",
            "-Dprism.marlinratserizer=true",
            "-Dprism.forceGPU=true",
            "-Dprism.text=t2k",
            "-Dprism.verbose=true",
            "-Djavafx.platform=gtk3",
            "-Dsun.java2d.opengl=true",
            "-XX:+AutoCreateSharedArchive",
            "-XX:SharedArchiveFile=spoty.jsa",
            "-DLog4jContextSelector=org.apache.logging.log4j.core.async.AsyncLoggerContextSelector"
    ]
}

jar {
    manifest {
        attributes(
                "Main-Class": "inc.nomard.spoty.Main"
        )
    }
}

ext.os = org.gradle.internal.os.OperatingSystem.current()

jlink {
    addExtraDependencies(
            "javafx",
            "jakarta.inject",
            "org.jetbrains.annotations",
            "com.dlsc.gemsfx:gemsfx",
            "eu.hansolo.fx:charts",
            "com.calendarfx:view",
            ":utils"
    )
    options = ["--strip-debug", "--no-header-files", "--no-man-pages"]
    launcher {
        name = "OpenSale ERP"
        jvmArgs = [
                "-XX:NewRatio=1",
                "-Xms256m",
                "-Xmx1G",
                "-XX:ReservedCodeCacheSize=128m",
                "-XX:MaxGCPauseMillis=200",
                "-XX:SoftRefLRUPolicyMSPerMB=50",
                "-XX:+HeapDumpOnOutOfMemoryError",
                "-Djbr.catch.SIGABRT=true",
                "-Djdk.attach.allowAttachSelf=true",
                "-XX:ErrorFile=/home/infinite-dev/IdeaProjects/spoty/error%p.log",
                "--add-exports=javafx.graphics/com.sun.glass.ui=ALL-UNNAMED",
                "-XX:+TieredCompilation",
                "-XX:+UseStringDeduplication",
                "-Xlog:gc*,gc+cpu,gc+heap=debug:file=/tmp/gc.log:time,uptime,level,tags",
                "-Djava.security.egd=file:/dev/urandom",
                "-XX:+AlwaysPreTouch",
                "-Dprism.marlinratserizer=true",
                "-Dprism.forceGPU=true",
                "-Dprism.text=t2k",
                "-Dprism.verbose=true",
                "-Djavafx.platform=gtk3",
                "-Dsun.java2d.opengl=true",
                "-XX:+AutoCreateSharedArchive",
                "-XX:SharedArchiveFile=spoty.jsa",
                "-DLog4jContextSelector=org.apache.logging.log4j.core.async.AsyncLoggerContextSelector"
        ]
    }

    jpackage {
        imageName = "$app_installer_name"
        appVersion = "$project.version"
        installerOptions = [
//                "--name", app_installer_name,
                "--description", project.description,
//                "--app-version", project.version,
                "--copyright", app_copyright,
                "--vendor", app_vendor,
                "--about-url", app_about_url,
                "--license-file", app_eula,
                "--resource-dir", resource_dir,
        ]

        if (os.linux) {
            icon = "$linux_icon"
            installerOptions += [
                    "--icon", linux_icon,
                    "--type", deb_linux_installer_type  /*rpm_linux_installer_type*/,
                    "--linux-app-release", spoty_release,
                    "--linux-package-name", app_installer_name,
                    "--linux-deb-maintainer", app_deb_maintainer,
                    "--linux-menu-group", app_group_name,
                    "--linux-app-category", app_group_name,
                    "--linux-shortcut",
            ]
        }
        if (os.macOsX) {
            icon = "$mac_icon"
            installerOptions += [
                    "--icon", mac_icon,
                    "--type", mac_installer_type,
                    "--mac-package-name", app_installer_name,
                    "--mac-package-signing-prefix", mac_package_signing_prefix,
                    "--mac-sign",
                    "--mac-signing-keychain", mac_signing_keychain,
                    "--mac-signing-key-user-name", mac_signing_key_user_name,
                    "--mac-app-store",
                    "--mac-entitlements", mac_entitlements,
                    "--mac-app-category", app_group_name,
            ]
        }
        if (os.windows) {
            icon = "$windows_icon"
            installerOptions += [
                    "--icon", windows_icon,
                    "--type", windows_installer_type,
                    "--win-dir-chooser",
                    "--win-help-url", help_url,
                    "--win-menu",
                    "--win-menu-group", app_group_name,
                    "--win-per-user-install",
                    "--win-shortcut",
                    "--win-shortcut-prompt",
                    "--win-update-url", update_url,
                    "--win-upgrade-uuid", update_uuid,
            ]
        }
    }
}

dependencies {
    implementation project(":network_bridge")
    implementation project(":utils")
    // Webp ImageIO
    implementation "com.gitee.jmash:webp-imageio:$webp_imag_io"
    // VirtualizedFX
    implementation "io.github.palexdev:virtualizedfx:$virtualized_fx"
    // Jakarta Inject API
    implementation "jakarta.inject:jakarta.inject-api:$jakarta_inject_api"
    // Measure Unit API
    implementation "javax.measure:unit-api:$measure_unit_api"
    // GemsFX
    implementation "com.dlsc.gemsfx:gemsfx:$gems_fx"
    // CalendarFX
    implementation "com.calendarfx:view:$calendar_fx"
    // FX Charts
    implementation "eu.hansolo.fx:charts:$fx_charts"
    // AtlantaFX
    implementation "io.github.mkpaz:atlantafx-parent:$atlanta_fx"
    implementation "io.github.mkpaz:atlantafx-styles:$atlanta_fx"
    implementation "io.github.mkpaz:atlantafx-base:$atlanta_fx"
    // GSon
    implementation "com.google.code.gson:gson:$gson"
    // MaterialFX
    implementation "io.github.palexdev:materialfx:$material_fx"
    // IkonLi
    implementation "org.kordamp.ikonli:ikonli-javafx:$ikonli"
    implementation "org.kordamp.ikonli:ikonli-core:$ikonli"
    implementation "org.kordamp.ikonli:ikonli-fontawesome5-pack:$ikonli"
    implementation "org.kordamp.ikonli:ikonli-feather-pack:$ikonli"
    // CSSFX
    implementation "fr.brouillard.oss:cssfx:$css_fx"
    // Lombok
    implementation "org.projectlombok:lombok:$lombok"
    compileOnly "org.projectlombok:lombok:$lombok"
    annotationProcessor "org.projectlombok:lombok:$lombok"
    // Lombok Tests
    testCompileOnly "org.projectlombok:lombok:$lombok"
    testAnnotationProcessor "org.projectlombok:lombok:$lombok"
    // Log4j2 dependencies
    implementation "org.apache.logging.log4j:log4j-api:$log4j2"
    implementation "org.apache.logging.log4j:log4j-core:$log4j2"
    // Async logging support in Log4j2
    implementation "org.apache.logging.log4j:log4j-jul:$log4j2"
    // Async logging (Disruptor) dependency
    implementation "com.lmax:disruptor:3.4.4"
    // Unit Tests
    implementation "org.junit.jupiter:junit-jupiter-api:$junit"
    implementation "org.junit.jupiter:junit-jupiter-engine:$junit"
}
